{"version":3,"sources":["FileService.js","App.js","reportWebVitals.js","index.js"],"names":["sendGetRequest","theUrl","a","axios","get","resp","data","console","error","columns","field","headerName","sortable","width","editable","onLoadFileButtonClick","changeFile","log","MyExportButton","App","props","React","useState","inputMasterListArray","setinputMasterListArray","beerNameFilterValue","setbeerNameFilterValue","brewerFilterValue","setbrewerFilterValue","Box","Typography","variant","Button","onClick","color","className","TextField","required","id","label","helperText","onChange","event","newArray","newValue","target","value","length","inputMasterFile","filter","obj","Beer","toUpperCase","includes","Brewer","style","height","rows","rowsPerPageOptions","pageSize","disableSelectionOnClick","components","Toolbar","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.eb98713a.chunk.js","sourcesContent":["import axios from 'axios';\r\nexport async function getJsonFile(theUrl) {\r\n    //console.log('calling axios get to url', theUrl)\r\n    try {\r\n      await axios({\r\n        url: theUrl,\r\n        method: 'GET',\r\n        //responseType: 'text/xml', // important\r\n      }).then((response) => {\r\n        //console.log('axios response', response)\r\n        return response;\r\n      });\r\n    }\r\n    catch(err) {\r\n        console.log('axios error', err)\r\n        this.props.showError('ERROR', JSON.stringify(err));\r\n        return false;\r\n    }\r\n  }\r\nexport async function sendGetRequest(theUrl) {\r\n    try {\r\n        //console.log(theUrl)\r\n        const resp = await axios.get(theUrl);\r\n        //console.log(resp.data);\r\n        return resp.data;\r\n    } catch (err) {\r\n        // Handle Error Here\r\n        console.error(err);\r\n    }\r\n};\r\n","import './App.css';\nimport React from 'react';\nimport inputMasterFile from './data/btg_master_list_20211003.json'\n//import inputMasterFile from 'https://github.com/mcqueene/the-tasting-app/blob/e4dd46ce51731314a8ec3c0d2d7a3f1db4e48704/btg_master_list_20211003.json'\nimport {DataGrid, GridToolbarExport, GridToolbarContainer } from '@mui/x-data-grid';\nimport {TextField,Box, Typography, Button} from '@mui/material';\nimport {sendGetRequest} from './FileService';\n\nconst columns = [\n  {\n    field: \"Beer\",\n    headerName: \"Beer Name\",\n    sortable: true,\n    width: 290,\n  },\n  {\n    field: 'Brewer',\n    headerName: 'Brewer',\n    width: 180,\n    editable: false,\n  },\n  {\n    field: 'DateTasted',\n    headerName: 'Date',\n    width: 110,\n    editable: false,\n  },\n  {\n    field: 'StatedStyle',\n    headerName: 'Style',\n    width: 150,\n    editable: false,\n  },\n  {\n    field: 'ABV',\n    headerName: 'ABV',\n    width: 120,\n    editable: false,\n  },\n  {\n    field: 'Taste',\n    headerName: 'Taste',\n    width: 100,\n    editable: false,\n    sortable: false,\n  },\n  {\n    field: 'Style',\n    headerName: 'Style',\n    width: 100,\n    editable: false,\n    sortable: false,\n  },\n  {\n    field: 'OverallScore',\n    headerName: 'Overall',\n    width: 100,\n    editable: false,\n    sortable: false,\n  },\n  {\n    field: 'Container',\n    headerName: 'Container',\n    width: 150,\n    editable: false,\n  },\n  {\n    field: 'City',\n    headerName: 'City',\n    width: 150,\n    editable: false,\n  },\n  {\n    field: 'StateCountry',\n    headerName: 'StateCountry',\n    width: 150,\n    editable: false,\n  },\n  {\n    field: 'Comments',\n    headerName: 'Comments',\n    width: 250,\n    editable: false,\n  },\n  { field: 'id',\n  headerName: 'row#',\n  sortable: true,\n  width: 115\n},\n];\n\nconst onLoadFileButtonClick = async () => {\n    const url = 'https://github.com/mcqueene/the-tasting-app/blob/e4dd46ce51731314a8ec3c0d2d7a3f1db4e48704/btg_master_list_20211003.json'\n    const changeFile = await sendGetRequest(url)\n    console.log(changeFile)\n}\n\nconst MyExportButton = () => {\n  return (\n    <GridToolbarContainer>\n      <GridToolbarExport />\n    </GridToolbarContainer>\n  );\n  }\nconst App = (props) => {\n  const [inputMasterListArray, setinputMasterListArray] = React.useState([]);\n  const [beerNameFilterValue, setbeerNameFilterValue] = React.useState('');\n  const [brewerFilterValue, setbrewerFilterValue] = React.useState('');\n\n  const onBeerNameFilterChange = (event) => {\n    let newArray = [];\n    const newValue = event.target.value;\n    if(newValue.length !== 0) {\n      newArray = inputMasterFile.filter((obj) => obj.Beer.toUpperCase().includes(newValue.toUpperCase()));\n      if(brewerFilterValue.length > 0) {\n        newArray = newArray.filter((obj) => obj.Brewer.toUpperCase().includes(brewerFilterValue.toUpperCase()));\n      }\n    }\n    else {\n      newArray = inputMasterFile.filter((obj) => obj.Brewer.toUpperCase().includes(brewerFilterValue.toUpperCase()));\n    }\n  setinputMasterListArray(newArray);\n    setbeerNameFilterValue(newValue);\n  };\n  const onBrewerFilterChange = (event) => {\n    let newArray = [];\n    const newValue = event.target.value;\n    if(newValue.length !== 0) {\n      newArray = inputMasterFile.filter((obj) => obj.Brewer.toUpperCase().includes(newValue.toUpperCase()));\n      if(beerNameFilterValue.length > 0) {\n        newArray = newArray.filter((obj) => obj.Beer.toUpperCase().includes(beerNameFilterValue.toUpperCase()));\n      }\n    }\n    else {\n      //console.log('filter on ', beerNameFilterValue.toUpperCase)\n      newArray = inputMasterFile.filter((obj) => obj.Beer.toUpperCase().includes(beerNameFilterValue.toUpperCase()));\n    }\n    setinputMasterListArray(newArray);\n    setbrewerFilterValue(newValue);\n  };\n\n\n  return (\n    <Box>\n      <Typography variant=\"h5\">The Tasting App</Typography>\n      <Button\n              onClick={onLoadFileButtonClick}\n              variant=\"contained\"\n              color=\"primary\">\n              Load File\n            </Button>\n\n\n      <div className=\"App\">\n        <TextField\n            required\n            id=\"outlined-required\"\n            label=\"Beer Name Filter\"\n            helperText=\"Begin typing the beer name to start filtering\"\n            variant=\"outlined\"\n            onChange={onBeerNameFilterChange}\n            value={beerNameFilterValue}\n        />\n        <TextField\n            required\n            id=\"outlined-required\"\n            label=\"Brewer Filter\"\n            helperText=\"Begin typing the brewer name to start filtering\"\n            variant=\"outlined\"\n            onChange={onBrewerFilterChange}\n            value={brewerFilterValue}\n        />\n\n        <div style={{ height: 600, width: '98%' }}>\n              <DataGrid\n                  rows={inputMasterListArray}\n                  columns={columns}\n                  rowsPerPageOptions={[5,10,20,30,50,100]}\n                  pageSize={20}\n                  disableSelectionOnClick\n                  components={{\n                    Toolbar: MyExportButton,\n                  }}\n              />\n          </div>\n      </div>\n    </Box>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}